# [소설 쓰는 딥 러닝] 개요

* Intro
  * 창작은 오랫동안 인간의 전유물이라고 여겨져 왔습니다. 특히 이전에 한번도 존재하지 않았던 새롭고 참신한 이야기를 생각해내는 능력은 인간만이 할 수 있는 고도의 예술 활동으로 여겨지며, 이는 어느 정도는 사실입니다. 
  * 음성 인식, 번역, 자율 주행 등 수많은 인공 지능 기술들이 사람들을 놀래키고 있는 요즘에도 아직 독자를 몰입시키는 스토리를 만들어내는 진정한 의미의 인공지능 이야기꾼은 등장할 기미가 보이지 않으니까요. 영어로도, 한국어로도 이는 어려운 일입니다.

* History

  * 하지만 자동으로 소설을 쓰려는 노력은 끊이지 않았습니다.
  * 1983년에는 "The Policeman’s Beard is Half Constructed"이라는 소설이 출간되었습니다. 
    * 최초로 프로그램으로 쓰여진 소설
    * **[Racter](https://en.wikipedia.org/wiki/Racter)**라는 프로그램으로 작성했음
  * 2008년에는 러시아에서 True love라는 소설이 출간되었는데요.
    * '안나 카레리나'를 'Haruki Murakami'라는 일본 작가의 글 스타일로 바꾼 소설
    * 320페이지를 100% 컴퓨터 프로그램으로 썼다고 함
    * 소설 속 문장 : “Kitty couldn’t fall asleep for a long time. Her nerves were strained as two tight strings, and even a glass of hot wine, that Vronsky made her drink, did not help her. Lying in bed she kept going over and over that monstrous scene at the meadow.”
    * 러시아에서 한동안 베스트셀러에 올랐다고 합니다.
  * 하지만 두 소설 모두 템플릿에 기반한 텍스트 조합 모델이 사용되었습니다.
  * 이 경우 일관성이 있고 소설의 작법에 부합하는 이야기가 나오기는 하지만, 사람이 만든 룰과 주어진 정보에 크게 의존한다는 단점이 있지요. 
  * 템플릿을 진정한 의미에서 인공지능이라고 부를 수 있는 것인가에 대해서도 의문이 남습니다.

* Application

  * 만약 이야기를 자연스럽게 생성해내는 모델을 만들 수 있다면, 많은 일들을 할 수 있겠죠.
  * 소설 쓰기 뿐만 아니라,
  * 게임에서 유저와 인터렉션하며 게임 스토리가 만들어지도록 할 수도 있고
  * 영화를 찍기 전에 시나리오가 얼마나 좋은지 평가하는 모델도 만들 수 있을 것입니다. 흥미로운 이야기를 쓸 수 있는 모델은 어떤 이야기가 흥미로운지도 알고 있을 테니까요.

* Why Deep learning

  * 그래서 저희는 소설을 만드는 모델에 도전해 보았습니다. 특히, 딥 러닝이라는 기술을 사용해서요.
  * 5~6년 전부터, 여러분들도 잘 알고 계시듯이 딥 러닝이라는 새로운 패러다임이 큰 인기를 끌고 있습니다.
  * 이미지, 음성 등은 물론 자연어 처리에서도 큰 혁신들이 딥 러닝에 의해 이루어졌습니다.
  * 저희는 소설 생성에서 템플릿에 의존하지 않고, 사람의 개입을 최소화하기 위해 딥 러닝을 사용했습니다.

* Basic Deep NLP

  * 자연어 처리에서 딥 러닝의 큰 가정은 두가지 입니다.
    * 첫째, 단어나 문장을 그 의미를 담은 벡터로 표현할 수 있다는 것입니다. 벡터로 표현된 단어나 문장은 연산을 통해서 우리가 원하는 Task를 수행할 수 있습니다. 이를 Distriuted hypothesis라고 부릅니다.
    * 둘째, 이렇게 단어와 문장의 벡터 표현과, 이를 이용해 Task를 수행하기 위한 연산 방법들을 모두 데이터를 통해 학습할 수 있다는 것입니다. 이를 이제 여러분들도 익숙한 용어인 Machine learning이라고 부릅니다.

* Limitation of deep NLP

  * 하지만 딥 러닝도 약점을 갖고 있습니다.
  * 한가지 예로, 딥 러닝 모델들은 한두 문장 이전의 맥락을 다음 문장에서 이어가는 데에서 어려움을 겪습니다. 즉 소설 처음부터 끝까지 일관성 있는 이야기를 이어가기 어렵다는 뜻이죠. 
  * 이를 vanishing gradient 문제라고 부르기도 합니다. 문장을 생성할 때 먼 곳의 맥락까지 고려하지 못하는 문제입니다.
  * 일반적인 딥 러닝 모델은 짧은 맥락 만을 고려하는 챗봇이나 번역에는 적합하지만 소설에는 적합하지 않았습니다.

* Model Overview

  * 저희는 이런 한계점을 극복하기 위해 나름의 모델을 구성했습니다. 저희 모델은 크게 3가지 모듈로 나뉘어져 있습니다.
  * Sentence Embedding : 문장을 의미를 담은 벡터로 바꾸기
  * Context Generation : 다음 문장 벡터를 생성하기
  * Surface Generation : 문장 벡터를 받아 실제 단어들을 만들어내기

* Sentence Emedding

  * 가장 간단한 방법 : 단어 벡터를 평균 내기
  * 좀 더 정교한 방법 : Skip-thought 등

* Context Generation

  * 가장 간단한 방법 : RNN Encoder-Decoder
  * 좀 더 정교한 방법 : Transformer

* Surface Generation

  * 모델의 구조는 Context Generation과 같습니다.
  * 인풋이 문장 벡터이고 아웃풋이 단어인 점만 다릅니다.

* Post Processing

  * 가능한 여러 문장 중에 자동으로 좋은 문장 선택하기
  * 띄어쓰기 맞추기
  * 등장인물 이름 넣기

* Demo

* What we've learned

  * End-to-End 가 아닌 모듈화
  * 도메인 지식의 중요성

* Outro

  * 저의 어릴 적 꿈은 소설가였습니다. 중학생 때부터 고등학생 때까지 소설가가 되는 것이 꿈이었죠.
  * 소설가가 되기 위해선 소설을 많이 써봐야 하는데, 하루는 소설이 너무 써지지 않았습니다.
  * 그날부터 계획을 하나 세웠습니다. 하루에 무조건 한 페이지씩 소설을 이어서 쓰자. 어제 쓴 글을 수정하지도 말고, 한 문장 다음에 다음 문장을 계속해서 이어서 쓰면 적어도 많이는 쓸 수 있겠지
  * 그렇게 한 달 넘게 이 계획을 지켰고, 결국 한 소설을 결말까지 냈던 기억이 납니다. 
  * 물론 지금 읽어보면 너무나 유치하고 부족한 소설이지만, 그래도 글 하나를 끝까지 썼다는 데 의의가 있었습니다.
  * 이번에 만든 '소설 쓰는 딥 러닝'도 어느 면에서는 그 때의 저와 비슷한 것 같습니다. 이전 문장을 고치지도 않고, 무조건 다음 문장을 쓰는 데만 집중하니까요.


  * 세상에는 수십, 수백 가지의 소설 쓰는 방법이 존재합니다.
    * "아이로봇" 등 SF 걸작들을 쓴 아이작 아시모프는 소설을 일필휘지로 한번에 쓴 뒤에 절대 수정하지 않기로 유명했고
    * 헤밍웨이는 소설을 한번 쓴 뒤 수십 번, 수천 번 고쳐쓰기로 유명했습니다.
    * 김훈은 "칼의 노래"에서 첫 문장을 '버려진 섬마다 꽃이 피었다'와 '버려진 섬마다 꽃은 피었다' 사이에서 몇날 며칠을 고민하다가 결정했고, 그 첫문장이 소설 전체의 분위기를 결정했다고 말한 바 있습니다.
    * 소설은 아니지만 만화가 양영순은 결말을 미리 그리고 그 앞의 이야기를 채워넣는 방법으로 방향을 놓치지 않고 이야기를 진행할 수 있었다고 말한 바 있습니다.
  * 이와 마찬가지로 소설을 쓰는 프로그램 역시 수십, 수백 가지의 접근 방법이 있을 수 있을 것입니다.
  * 수많은 방법들 중 하나는 어쩌면 자연스럽고 흥미로운 소설을 자동으로 써내는 데 성공할 지도 모릅니다.
  * 저희는 그 중에 하나를 시도해 보았을 뿐입니다. 아직 머나먼 일이지만, 그런 프로그램이 나오는 데 저희의 노력이 하나의 도움이 될 수 있기를 바랍니다.